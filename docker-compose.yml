services:
# WatchTower
  # watchtower:
  #   image: containrrr/watchtower
  #   restart: always
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command:
  #     - "--label-enable"
  #     - "--interval"
  #     - "3600"
  #     - "--rolling-restart"
  #   networks:
  #     - traefik-server
# Traefik
  traefik:
    image: ghcr.io/benja-m24/traefik-servermanager:lts
    ports:
      - 80:80 # HTTP port
      - 443:443 # HTTPS port
      - 443:443/udp # HTTP/3 port
      # SMTP ports
      - 25:25
      - 143:143 # No SSL/TLS
      - 465:465 # SSL/TLS
      - 587:587 # Submission STARTTLS
      - 993:993 # IMAP STARTTLS
    restart: always
    labels:
      # WatchTower monitoring testing
      # - com.centurylinklabs.watchtower.enable=true
      # - com.centurylinklabs.watchtower.scope=main-images

      # Traefik configuration
      - traefik.enable=true
      - traefik.docker.network=traefik-server

      ## 1 - HTTPS redirect middleware
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      ## 2 - security-headers middleware
      - traefik.http.middlewares.security-headers.headers.sslRedirect=true
      - traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.security-headers.headers.stsPreload=true
      - traefik.http.middlewares.security-headers.headers.stsSeconds=31536000
      - traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff
      - traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Frame-Options=SAMEORIGIN
      - traefik.http.middlewares.security-headers.headers.customresponseheaders.X-XSS-Protection=1; mode=block
      - traefik.http.middlewares.security-headers.headers.customresponseheaders.Referrer-Policy=strict-origin-when-cross-origin
      - traefik.http.middlewares.security-headers.headers.customresponseheaders.Content-Security-Policy=default-src 'self'
      ### Permissions-Policy
      - traefik.http.middlewares.security-headers.headers.customresponseheaders.Permissions-Policy="camera=(), microphone=(), geolocation=(), display-capture=(), payment=(), gyroscope=(), encrypted-media=(), fullscreen=(), picture-in-picture=(), speaker=(), document-domain=(), unsized-media=(), oversized-images=(), layout-animations=()"
      ## 3 - Basic Auth middleware
      - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME}:${HASHED_PASSWORD}
      ## 4 - Rate limiting middleware
      - traefik.http.middlewares.metrics-ratelimit.rateLimit.average=30
      - traefik.http.middlewares.metrics-ratelimit.rateLimit.burst=50

      # Dashboard router configuration
      ## HTTP
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.${DOMAIN}`)
      ## HTTPS
      - traefik.http.routers.traefik-dashboard-https.entrypoints=https
      - traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik-dashboard-https.tls=true
      - traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
      - traefik.http.routers.traefik-dashboard-https.service=api@internal
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      ## Aplicate Middleware
      - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect
      - traefik.http.routers.traefik-dashboard-https.middlewares=security-headers,admin-auth

      # HTTP router configuration for Traefik metrics
      ## HTTP
      - traefik.http.routers.metrics-http.entrypoints=http
      - traefik.http.routers.metrics-http.rule=Host(`metrics.${DOMAIN}`)
      ## HTTP router
      - traefik.http.routers.metrics-https.entrypoints=https
      - traefik.http.routers.metrics-https.rule=Host(`metrics.${DOMAIN}`)
      - traefik.http.routers.metrics-https.tls=true
      - traefik.http.routers.metrics-https.tls.certresolver=le
      - traefik.http.routers.metrics-https.service=metrics@internal
      - traefik.http.services.metrics-https.loadbalancer.server.port=8082
      ## Aplicate Middleware
      - traefik.http.middlewares.auth-metrics.basicauth.users=${USERNAME}:${HASHED_PASSWORD}
      - traefik.http.routers.metrics-http.middlewares=auth-metrics
      - traefik.http.routers.metrics-https.middlewares=auth-metrics,security-headers,metrics-ratelimit
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Docker socket for reading service labels
      - traefik-server-certificates:/certificates # Certificate storage
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CF_API_TOKEN}  # Token Cloudflare DNS:Edit
    command:
      - --log.level=DEBUG
      # Smtp configuration
      - --providers.docker.network=traefik-server
      - --entrypoints.smtp.address=:25/tcp
      - --entrypoints.smtps.address=:465/tcp
      - --entrypoints.submission.address=:587/tcp
      - --entrypoints.imap.address=:143/tcp
      - --entrypoints.imaps.address=:993/tcp
      # Entrypoints configuration
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.metrics.address=:8082
      # Metrics configuration
      - --metrics.prometheus.manualrouting=true
      - --metrics.prometheus.addentrypointslabels=true
      - --metrics.prometheus.addserviceslabels=true
      - --metrics.prometheus.addrouterslabels=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      # HTTP/3
      - --entrypoints.https.http3
      - --entrypoints.http.http2.maxConcurrentStreams=100
      # Enables the Docker provider for Traefik, allowing it to detect containers
      # and dynamically configure routing (routers, middlewares, services) based on container labels.
      - --providers.docker
      # By default, containers are not exposed to Traefik; only those explicitly marked with
      # 'traefik.enable=true' will be managed. This provides granular control and enhances security.
      - --providers.docker.exposedbydefault=false
      # Let's Encrypt configuration
      - --certificatesresolvers.le.acme.email=${ACME_EMAIL?Variable not set}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.dnschallenge=true
      - --certificatesresolvers.le.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.le.acme.dnschallenge.delaybeforecheck=30
      - --certificatesresolvers.le.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      # Optimiize Traefik performance
      - --serversTransport.maxIdleConnsPerHost=10
      - --serversTransport.forwardingTimeouts.dialTimeout=10s
      - --serversTransport.forwardingTimeouts.responseHeaderTimeout=30s
      # Logging and API configuration
      - --accesslog
      - --log
      - --api
    networks:
      - traefik-server # Public network for Traefik and other services

volumes:
  traefik-server-certificates: # Persistent volume for certificates

networks:
  traefik-server:
    name: traefik-server
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: 172.64.1.0/24  # IPv4
        - subnet: fd00:1::/64    # IPv6
